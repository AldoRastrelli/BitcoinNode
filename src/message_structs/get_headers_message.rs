use crate::message_structs::bitcoin_message_header::BitcoinMessageHeader;
use crate::message_structs::compact_size::CompactSize;
use crate::utils::build_messages::build_header_message;
use crate::utils::configs::config::get_protocol_version;
use std::io::Write;
use std::net::TcpStream;

use std::error::Error;

#[derive(Debug, PartialEq)]
pub struct GetHeadersMessage {
    pub version: u32,
    pub hash_count: CompactSize,
    pub block_locator_hashes: Vec<[u8; 32]>,
    pub hash_stop: [u8; 32],
}

impl GetHeadersMessage {
    pub fn build_default() -> Result<Self, Box<dyn Error>> {
        let protocol_version = match get_protocol_version() {
            Ok(protocol_version) => protocol_version,
            Err(e) => return Err(e),
        };

        Ok(GetHeadersMessage {
            version: protocol_version,
            hash_count: CompactSize {
                prefix: 0,
                number_vec: vec![1],
                number: 1,
            },
            block_locator_hashes: vec![[0; 32]],
            hash_stop: [0; 32],
        })
    }

    pub fn to_vec(&self) -> Result<Vec<u8>, Box<dyn Error>> {
        let payload = self.serialize();
        build_header_message("version", payload)
    }

    pub fn serialize(&self) -> Vec<u8> {
        let mut get_headers_message: Vec<u8> = Vec::new();
        get_headers_message.extend_from_slice(&self.version.to_le_bytes());
        get_headers_message.extend_from_slice(&self.hash_count.serialize());
        for i in &self.block_locator_hashes {
            get_headers_message.extend_from_slice(i);
        }
        get_headers_message.extend_from_slice(&self.hash_stop);
        get_headers_message
    }

    pub fn send(&self, mut stream: &TcpStream) -> Result<&str, Box<dyn std::error::Error>> {
        let serialize_get_headers = self.serialize();
        let payload = 36 + 32 * self.block_locator_hashes.len() + self.hash_count.size();
        let header_get_header = BitcoinMessageHeader::message(
            &serialize_get_headers,
            [
                b'g', b'e', b't', b'h', b'e', b'a', b'd', b'e', b'r', b's', 0x00, 0x00,
            ],
            payload as u32,
        );
        let header = header_get_header.header(&serialize_get_headers);
        stream.write_all(&header)?;
        match stream.flush() {
            Ok(_) => Ok("GetHeadersMessage sent"),
            Err(e) => Err(e.into()),
        }
    }

    pub fn deserialize(
        payload: &mut Vec<u8>,
    ) -> Result<GetHeadersMessage, Box<dyn std::error::Error>> {
        let version = Self::from_le_bytes_u32(payload);
        let hash_count = CompactSize::deserialize(payload);
        let mut block_locator_hashes: Vec<[u8; 32]> = Vec::new();
        for _i in 0..hash_count.get_number() {
            let hash = match payload.drain(0..32).collect::<Vec<u8>>().try_into() {
                Ok(a) => a,
                Err(_) => {
                    return Err("Failed to deserialize".into());
                }
            };
            block_locator_hashes.push(hash);
        }
        let hash_stop = match payload.drain(0..32).collect::<Vec<u8>>().try_into() {
            Ok(a) => a,
            Err(_) => {
                return Err("Failed to deserialize".into());
            }
        };

        Ok(GetHeadersMessage {
            version,
            hash_count,
            block_locator_hashes,
            hash_stop,
        })
    }

    pub fn hashes(&self)->Vec<[u8;32]>{
        self.block_locator_hashes.clone()
    }

    fn from_le_bytes_u32(payload: &mut Vec<u8>) -> u32 {
        u32::from_le_bytes([
            payload.remove(0),
            payload.remove(0),
            payload.remove(0),
            payload.remove(0),
        ])
    }

    pub fn get_csv_format(&self) -> Vec<String> {
        let version_to_str = self.version.to_string();
        let hash_count_to_str = self.hash_count.get_number().to_string();

        let mut block_locator_hashes_to_str = String::new();
        for byte_arr in self.block_locator_hashes.iter() {
            for byte in byte_arr {
                block_locator_hashes_to_str.push_str(&format!("{:02X}", byte));
            }
        }

        let mut hash_stop_to_str = String::new();
        for byte in self.hash_stop.iter() {
            hash_stop_to_str.push_str(&format!("{:02X}", byte));
        }

        vec![
            "GetHeadersMessage".to_string(),
            version_to_str,
            hash_count_to_str,
            block_locator_hashes_to_str,
            hash_stop_to_str,
        ]
    }
}

#[cfg(test)]
mod get_headers_message_tests {

    use super::*;

    #[test]
    fn test_build_default() {
        let get_headers = GetHeadersMessage::build_default().unwrap();
        // println!("{:?}", get_headers.to_vec());
        assert_eq!(get_headers.version, 70015);
        assert_eq!(
            get_headers.hash_count,
            CompactSize {
                prefix: 0,
                number_vec: vec![1],
                number: 1
            }
        );
        assert_eq!(get_headers.block_locator_hashes.len(), 1);
        assert_eq!(get_headers.hash_stop, [0; 32]);
    }

    #[test]
    fn test_get_csv_format_version_ok() {
        let get_headers = GetHeadersMessage::build_default().unwrap();
        let get_headers_csv = get_headers.get_csv_format();
        assert_eq!(get_headers_csv[1], "70015");
    }

    #[test]
    fn test_get_csv_format_number_ok() {
        let get_headers = GetHeadersMessage::build_default().unwrap();
        let get_headers_csv = get_headers.get_csv_format();
        assert_eq!(get_headers_csv[2], "1");
    }

    #[test]
    fn test_get_csv_format_block_locator_hashes_ok() {
        let get_headers = GetHeadersMessage::build_default().unwrap();
        let get_headers_csv = get_headers.get_csv_format();
        assert_eq!(
            get_headers_csv[3],
            "0000000000000000000000000000000000000000000000000000000000000000"
        );
    }

    #[test]
    fn test_get_csv_format_hash_stop_ok() {
        let get_headers = GetHeadersMessage::build_default().unwrap();
        let get_headers_csv = get_headers.get_csv_format();
        assert_eq!(
            get_headers_csv[4],
            "0000000000000000000000000000000000000000000000000000000000000000"
        );
    }

    #[test]
    fn test_serialize() {
        let get_headers = GetHeadersMessage {
            version: 70015,
            hash_count: CompactSize {
                prefix: 0,
                number_vec: vec![33],
                number: 33,
            },
            block_locator_hashes: vec![
                [
                    4, 80, 41, 173, 94, 213, 14, 0, 74, 134, 99, 228, 190, 10, 253, 189, 205, 171,
                    161, 199, 165, 95, 246, 123, 101, 3, 0, 0, 0, 0, 0, 0,
                ],
                [
                    207, 230, 23, 89, 83, 197, 224, 215, 246, 119, 85, 80, 147, 133, 87, 152, 194,
                    54, 218, 59, 63, 100, 246, 17, 115, 58, 63, 106, 0, 0, 0, 0,
                ],
                [
                    117, 205, 205, 12, 186, 229, 3, 79, 13, 203, 169, 159, 140, 96, 32, 145, 91,
                    93, 18, 20, 64, 11, 136, 159, 3, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    30, 210, 216, 123, 145, 148, 237, 35, 118, 217, 111, 122, 82, 156, 168, 95,
                    160, 151, 130, 78, 253, 101, 183, 170, 25, 173, 43, 196, 0, 0, 0, 0,
                ],
                [
                    255, 76, 148, 181, 0, 121, 35, 117, 50, 138, 145, 84, 112, 18, 151, 188, 65,
                    200, 4, 193, 222, 164, 41, 208, 158, 97, 203, 100, 0, 0, 0, 0,
                ],
                [
                    142, 161, 36, 171, 101, 187, 145, 160, 9, 168, 222, 16, 85, 46, 50, 76, 217,
                    219, 153, 127, 186, 102, 187, 4, 80, 229, 0, 0, 0, 0, 0, 0,
                ],
                [
                    31, 216, 202, 73, 179, 72, 94, 80, 97, 210, 236, 235, 131, 32, 107, 58, 198,
                    178, 43, 81, 242, 237, 68, 53, 28, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    61, 123, 193, 129, 211, 101, 49, 87, 168, 252, 180, 63, 227, 122, 251, 169, 64,
                    171, 242, 171, 30, 24, 111, 112, 0, 118, 0, 0, 0, 0, 0, 0,
                ],
                [
                    196, 190, 128, 199, 126, 208, 37, 8, 197, 78, 195, 79, 253, 185, 181, 238, 120,
                    13, 2, 200, 121, 49, 147, 65, 115, 79, 162, 129, 0, 0, 0, 0,
                ],
                [
                    174, 222, 225, 127, 148, 229, 221, 201, 56, 14, 221, 62, 159, 50, 108, 159,
                    207, 244, 17, 232, 216, 237, 243, 118, 20, 17, 0, 0, 0, 0, 0, 0,
                ],
                [
                    17, 155, 106, 2, 239, 252, 193, 195, 137, 196, 103, 115, 204, 190, 137, 158,
                    77, 99, 220, 125, 192, 28, 57, 179, 124, 131, 144, 101, 0, 0, 0, 0,
                ],
                [
                    84, 117, 15, 78, 47, 146, 15, 128, 128, 49, 80, 215, 158, 129, 70, 134, 146,
                    244, 53, 202, 4, 130, 101, 107, 209, 6, 0, 0, 0, 0, 0, 0,
                ],
                [
                    40, 119, 18, 62, 187, 225, 252, 127, 162, 236, 233, 34, 77, 237, 185, 188, 60,
                    243, 106, 112, 158, 72, 149, 209, 84, 203, 106, 72, 0, 0, 0, 0,
                ],
                [
                    7, 241, 194, 169, 243, 0, 114, 169, 172, 214, 36, 250, 111, 22, 180, 14, 67,
                    246, 73, 82, 89, 0, 78, 11, 2, 3, 0, 0, 0, 0, 0, 0,
                ],
                [
                    120, 68, 45, 215, 223, 53, 46, 9, 191, 208, 102, 191, 121, 127, 247, 236, 189,
                    7, 135, 90, 35, 48, 212, 54, 20, 180, 0, 0, 0, 0, 0, 0,
                ],
                [
                    233, 113, 147, 177, 249, 169, 12, 221, 14, 251, 222, 143, 195, 222, 141, 1,
                    169, 70, 208, 127, 136, 134, 118, 139, 91, 177, 0, 0, 0, 0, 0, 0,
                ],
                [
                    100, 248, 226, 6, 190, 99, 103, 30, 33, 232, 234, 53, 189, 146, 102, 210, 99,
                    231, 128, 129, 253, 202, 25, 211, 124, 33, 128, 112, 0, 0, 0, 0,
                ],
                [
                    200, 215, 217, 48, 12, 240, 250, 231, 208, 43, 84, 35, 52, 149, 212, 212, 233,
                    100, 133, 18, 87, 3, 96, 95, 180, 136, 189, 185, 0, 0, 0, 0,
                ],
                [
                    55, 72, 84, 1, 131, 235, 197, 113, 56, 42, 220, 113, 209, 129, 42, 115, 168,
                    12, 219, 100, 47, 123, 157, 78, 255, 123, 118, 101, 0, 0, 0, 0,
                ],
                [
                    136, 164, 23, 76, 81, 223, 185, 89, 80, 142, 184, 128, 105, 130, 107, 150, 75,
                    27, 4, 26, 8, 150, 105, 171, 5, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    144, 212, 241, 84, 243, 64, 129, 6, 198, 152, 60, 141, 249, 16, 90, 197, 204,
                    84, 83, 134, 80, 32, 184, 142, 35, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    48, 126, 157, 193, 176, 225, 50, 11, 145, 199, 95, 76, 179, 211, 211, 161, 31,
                    143, 8, 204, 92, 127, 109, 249, 32, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    227, 10, 244, 225, 111, 217, 147, 145, 212, 38, 155, 31, 211, 59, 235, 44, 99,
                    24, 38, 23, 107, 4, 211, 222, 17, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    127, 237, 16, 35, 125, 51, 72, 221, 207, 150, 56, 126, 180, 252, 61, 75, 87,
                    255, 193, 14, 249, 170, 130, 207, 32, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    181, 101, 188, 111, 160, 30, 186, 182, 205, 183, 108, 59, 181, 47, 26, 104, 45,
                    184, 173, 103, 107, 132, 2, 40, 35, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    109, 52, 112, 39, 105, 248, 205, 177, 234, 93, 239, 11, 44, 20, 194, 255, 46,
                    41, 219, 47, 107, 223, 245, 29, 122, 24, 0, 0, 0, 0, 0, 0,
                ],
                [
                    36, 38, 44, 246, 220, 133, 22, 122, 25, 42, 90, 129, 82, 182, 153, 228, 50, 62,
                    145, 73, 172, 19, 121, 251, 141, 229, 0, 0, 0, 0, 0, 0,
                ],
                [
                    81, 125, 237, 180, 2, 249, 180, 199, 34, 63, 200, 45, 17, 187, 57, 77, 184, 95,
                    66, 225, 84, 9, 92, 179, 76, 16, 0, 0, 0, 0, 0, 0,
                ],
                [
                    115, 18, 105, 179, 199, 247, 24, 189, 130, 162, 147, 112, 249, 172, 210, 155,
                    193, 16, 146, 53, 87, 250, 15, 168, 196, 126, 76, 5, 0, 0, 0, 0,
                ],
                [
                    98, 6, 83, 219, 181, 91, 31, 94, 30, 46, 43, 207, 129, 126, 155, 236, 89, 27,
                    41, 50, 3, 227, 183, 173, 42, 80, 0, 0, 0, 0, 0, 0,
                ],
                [
                    85, 146, 71, 236, 127, 55, 38, 140, 138, 245, 44, 68, 186, 195, 201, 248, 170,
                    67, 34, 150, 208, 13, 153, 77, 60, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    201, 151, 131, 49, 247, 248, 123, 242, 92, 135, 178, 84, 189, 68, 130, 184,
                    101, 66, 68, 60, 12, 201, 136, 176, 142, 87, 61, 15, 0, 0, 0, 0,
                ],
                [
                    67, 73, 127, 215, 248, 38, 149, 113, 8, 244, 163, 15, 217, 206, 195, 174, 186,
                    121, 151, 32, 132, 233, 14, 173, 1, 234, 51, 9, 0, 0, 0, 0,
                ],
            ],
            hash_stop: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ],
        };
        let bytes: Vec<u8> = vec![
            127, 17, 1, 0, 33, 4, 80, 41, 173, 94, 213, 14, 0, 74, 134, 99, 228, 190, 10, 253, 189,
            205, 171, 161, 199, 165, 95, 246, 123, 101, 3, 0, 0, 0, 0, 0, 0, 207, 230, 23, 89, 83,
            197, 224, 215, 246, 119, 85, 80, 147, 133, 87, 152, 194, 54, 218, 59, 63, 100, 246, 17,
            115, 58, 63, 106, 0, 0, 0, 0, 117, 205, 205, 12, 186, 229, 3, 79, 13, 203, 169, 159,
            140, 96, 32, 145, 91, 93, 18, 20, 64, 11, 136, 159, 3, 0, 0, 0, 0, 0, 0, 0, 30, 210,
            216, 123, 145, 148, 237, 35, 118, 217, 111, 122, 82, 156, 168, 95, 160, 151, 130, 78,
            253, 101, 183, 170, 25, 173, 43, 196, 0, 0, 0, 0, 255, 76, 148, 181, 0, 121, 35, 117,
            50, 138, 145, 84, 112, 18, 151, 188, 65, 200, 4, 193, 222, 164, 41, 208, 158, 97, 203,
            100, 0, 0, 0, 0, 142, 161, 36, 171, 101, 187, 145, 160, 9, 168, 222, 16, 85, 46, 50,
            76, 217, 219, 153, 127, 186, 102, 187, 4, 80, 229, 0, 0, 0, 0, 0, 0, 31, 216, 202, 73,
            179, 72, 94, 80, 97, 210, 236, 235, 131, 32, 107, 58, 198, 178, 43, 81, 242, 237, 68,
            53, 28, 0, 0, 0, 0, 0, 0, 0, 61, 123, 193, 129, 211, 101, 49, 87, 168, 252, 180, 63,
            227, 122, 251, 169, 64, 171, 242, 171, 30, 24, 111, 112, 0, 118, 0, 0, 0, 0, 0, 0, 196,
            190, 128, 199, 126, 208, 37, 8, 197, 78, 195, 79, 253, 185, 181, 238, 120, 13, 2, 200,
            121, 49, 147, 65, 115, 79, 162, 129, 0, 0, 0, 0, 174, 222, 225, 127, 148, 229, 221,
            201, 56, 14, 221, 62, 159, 50, 108, 159, 207, 244, 17, 232, 216, 237, 243, 118, 20, 17,
            0, 0, 0, 0, 0, 0, 17, 155, 106, 2, 239, 252, 193, 195, 137, 196, 103, 115, 204, 190,
            137, 158, 77, 99, 220, 125, 192, 28, 57, 179, 124, 131, 144, 101, 0, 0, 0, 0, 84, 117,
            15, 78, 47, 146, 15, 128, 128, 49, 80, 215, 158, 129, 70, 134, 146, 244, 53, 202, 4,
            130, 101, 107, 209, 6, 0, 0, 0, 0, 0, 0, 40, 119, 18, 62, 187, 225, 252, 127, 162, 236,
            233, 34, 77, 237, 185, 188, 60, 243, 106, 112, 158, 72, 149, 209, 84, 203, 106, 72, 0,
            0, 0, 0, 7, 241, 194, 169, 243, 0, 114, 169, 172, 214, 36, 250, 111, 22, 180, 14, 67,
            246, 73, 82, 89, 0, 78, 11, 2, 3, 0, 0, 0, 0, 0, 0, 120, 68, 45, 215, 223, 53, 46, 9,
            191, 208, 102, 191, 121, 127, 247, 236, 189, 7, 135, 90, 35, 48, 212, 54, 20, 180, 0,
            0, 0, 0, 0, 0, 233, 113, 147, 177, 249, 169, 12, 221, 14, 251, 222, 143, 195, 222, 141,
            1, 169, 70, 208, 127, 136, 134, 118, 139, 91, 177, 0, 0, 0, 0, 0, 0, 100, 248, 226, 6,
            190, 99, 103, 30, 33, 232, 234, 53, 189, 146, 102, 210, 99, 231, 128, 129, 253, 202,
            25, 211, 124, 33, 128, 112, 0, 0, 0, 0, 200, 215, 217, 48, 12, 240, 250, 231, 208, 43,
            84, 35, 52, 149, 212, 212, 233, 100, 133, 18, 87, 3, 96, 95, 180, 136, 189, 185, 0, 0,
            0, 0, 55, 72, 84, 1, 131, 235, 197, 113, 56, 42, 220, 113, 209, 129, 42, 115, 168, 12,
            219, 100, 47, 123, 157, 78, 255, 123, 118, 101, 0, 0, 0, 0, 136, 164, 23, 76, 81, 223,
            185, 89, 80, 142, 184, 128, 105, 130, 107, 150, 75, 27, 4, 26, 8, 150, 105, 171, 5, 0,
            0, 0, 0, 0, 0, 0, 144, 212, 241, 84, 243, 64, 129, 6, 198, 152, 60, 141, 249, 16, 90,
            197, 204, 84, 83, 134, 80, 32, 184, 142, 35, 0, 0, 0, 0, 0, 0, 0, 48, 126, 157, 193,
            176, 225, 50, 11, 145, 199, 95, 76, 179, 211, 211, 161, 31, 143, 8, 204, 92, 127, 109,
            249, 32, 0, 0, 0, 0, 0, 0, 0, 227, 10, 244, 225, 111, 217, 147, 145, 212, 38, 155, 31,
            211, 59, 235, 44, 99, 24, 38, 23, 107, 4, 211, 222, 17, 0, 0, 0, 0, 0, 0, 0, 127, 237,
            16, 35, 125, 51, 72, 221, 207, 150, 56, 126, 180, 252, 61, 75, 87, 255, 193, 14, 249,
            170, 130, 207, 32, 0, 0, 0, 0, 0, 0, 0, 181, 101, 188, 111, 160, 30, 186, 182, 205,
            183, 108, 59, 181, 47, 26, 104, 45, 184, 173, 103, 107, 132, 2, 40, 35, 0, 0, 0, 0, 0,
            0, 0, 109, 52, 112, 39, 105, 248, 205, 177, 234, 93, 239, 11, 44, 20, 194, 255, 46, 41,
            219, 47, 107, 223, 245, 29, 122, 24, 0, 0, 0, 0, 0, 0, 36, 38, 44, 246, 220, 133, 22,
            122, 25, 42, 90, 129, 82, 182, 153, 228, 50, 62, 145, 73, 172, 19, 121, 251, 141, 229,
            0, 0, 0, 0, 0, 0, 81, 125, 237, 180, 2, 249, 180, 199, 34, 63, 200, 45, 17, 187, 57,
            77, 184, 95, 66, 225, 84, 9, 92, 179, 76, 16, 0, 0, 0, 0, 0, 0, 115, 18, 105, 179, 199,
            247, 24, 189, 130, 162, 147, 112, 249, 172, 210, 155, 193, 16, 146, 53, 87, 250, 15,
            168, 196, 126, 76, 5, 0, 0, 0, 0, 98, 6, 83, 219, 181, 91, 31, 94, 30, 46, 43, 207,
            129, 126, 155, 236, 89, 27, 41, 50, 3, 227, 183, 173, 42, 80, 0, 0, 0, 0, 0, 0, 85,
            146, 71, 236, 127, 55, 38, 140, 138, 245, 44, 68, 186, 195, 201, 248, 170, 67, 34, 150,
            208, 13, 153, 77, 60, 0, 0, 0, 0, 0, 0, 0, 201, 151, 131, 49, 247, 248, 123, 242, 92,
            135, 178, 84, 189, 68, 130, 184, 101, 66, 68, 60, 12, 201, 136, 176, 142, 87, 61, 15,
            0, 0, 0, 0, 67, 73, 127, 215, 248, 38, 149, 113, 8, 244, 163, 15, 217, 206, 195, 174,
            186, 121, 151, 32, 132, 233, 14, 173, 1, 234, 51, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        assert_eq!(get_headers.serialize(), bytes);
    }

    #[test]
    fn test_deserialize() {
        let get_headers = GetHeadersMessage {
            version: 70015,
            hash_count: CompactSize {
                prefix: 0,
                number_vec: vec![33],
                number: 33,
            },
            block_locator_hashes: vec![
                [
                    4, 80, 41, 173, 94, 213, 14, 0, 74, 134, 99, 228, 190, 10, 253, 189, 205, 171,
                    161, 199, 165, 95, 246, 123, 101, 3, 0, 0, 0, 0, 0, 0,
                ],
                [
                    207, 230, 23, 89, 83, 197, 224, 215, 246, 119, 85, 80, 147, 133, 87, 152, 194,
                    54, 218, 59, 63, 100, 246, 17, 115, 58, 63, 106, 0, 0, 0, 0,
                ],
                [
                    117, 205, 205, 12, 186, 229, 3, 79, 13, 203, 169, 159, 140, 96, 32, 145, 91,
                    93, 18, 20, 64, 11, 136, 159, 3, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    30, 210, 216, 123, 145, 148, 237, 35, 118, 217, 111, 122, 82, 156, 168, 95,
                    160, 151, 130, 78, 253, 101, 183, 170, 25, 173, 43, 196, 0, 0, 0, 0,
                ],
                [
                    255, 76, 148, 181, 0, 121, 35, 117, 50, 138, 145, 84, 112, 18, 151, 188, 65,
                    200, 4, 193, 222, 164, 41, 208, 158, 97, 203, 100, 0, 0, 0, 0,
                ],
                [
                    142, 161, 36, 171, 101, 187, 145, 160, 9, 168, 222, 16, 85, 46, 50, 76, 217,
                    219, 153, 127, 186, 102, 187, 4, 80, 229, 0, 0, 0, 0, 0, 0,
                ],
                [
                    31, 216, 202, 73, 179, 72, 94, 80, 97, 210, 236, 235, 131, 32, 107, 58, 198,
                    178, 43, 81, 242, 237, 68, 53, 28, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    61, 123, 193, 129, 211, 101, 49, 87, 168, 252, 180, 63, 227, 122, 251, 169, 64,
                    171, 242, 171, 30, 24, 111, 112, 0, 118, 0, 0, 0, 0, 0, 0,
                ],
                [
                    196, 190, 128, 199, 126, 208, 37, 8, 197, 78, 195, 79, 253, 185, 181, 238, 120,
                    13, 2, 200, 121, 49, 147, 65, 115, 79, 162, 129, 0, 0, 0, 0,
                ],
                [
                    174, 222, 225, 127, 148, 229, 221, 201, 56, 14, 221, 62, 159, 50, 108, 159,
                    207, 244, 17, 232, 216, 237, 243, 118, 20, 17, 0, 0, 0, 0, 0, 0,
                ],
                [
                    17, 155, 106, 2, 239, 252, 193, 195, 137, 196, 103, 115, 204, 190, 137, 158,
                    77, 99, 220, 125, 192, 28, 57, 179, 124, 131, 144, 101, 0, 0, 0, 0,
                ],
                [
                    84, 117, 15, 78, 47, 146, 15, 128, 128, 49, 80, 215, 158, 129, 70, 134, 146,
                    244, 53, 202, 4, 130, 101, 107, 209, 6, 0, 0, 0, 0, 0, 0,
                ],
                [
                    40, 119, 18, 62, 187, 225, 252, 127, 162, 236, 233, 34, 77, 237, 185, 188, 60,
                    243, 106, 112, 158, 72, 149, 209, 84, 203, 106, 72, 0, 0, 0, 0,
                ],
                [
                    7, 241, 194, 169, 243, 0, 114, 169, 172, 214, 36, 250, 111, 22, 180, 14, 67,
                    246, 73, 82, 89, 0, 78, 11, 2, 3, 0, 0, 0, 0, 0, 0,
                ],
                [
                    120, 68, 45, 215, 223, 53, 46, 9, 191, 208, 102, 191, 121, 127, 247, 236, 189,
                    7, 135, 90, 35, 48, 212, 54, 20, 180, 0, 0, 0, 0, 0, 0,
                ],
                [
                    233, 113, 147, 177, 249, 169, 12, 221, 14, 251, 222, 143, 195, 222, 141, 1,
                    169, 70, 208, 127, 136, 134, 118, 139, 91, 177, 0, 0, 0, 0, 0, 0,
                ],
                [
                    100, 248, 226, 6, 190, 99, 103, 30, 33, 232, 234, 53, 189, 146, 102, 210, 99,
                    231, 128, 129, 253, 202, 25, 211, 124, 33, 128, 112, 0, 0, 0, 0,
                ],
                [
                    200, 215, 217, 48, 12, 240, 250, 231, 208, 43, 84, 35, 52, 149, 212, 212, 233,
                    100, 133, 18, 87, 3, 96, 95, 180, 136, 189, 185, 0, 0, 0, 0,
                ],
                [
                    55, 72, 84, 1, 131, 235, 197, 113, 56, 42, 220, 113, 209, 129, 42, 115, 168,
                    12, 219, 100, 47, 123, 157, 78, 255, 123, 118, 101, 0, 0, 0, 0,
                ],
                [
                    136, 164, 23, 76, 81, 223, 185, 89, 80, 142, 184, 128, 105, 130, 107, 150, 75,
                    27, 4, 26, 8, 150, 105, 171, 5, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    144, 212, 241, 84, 243, 64, 129, 6, 198, 152, 60, 141, 249, 16, 90, 197, 204,
                    84, 83, 134, 80, 32, 184, 142, 35, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    48, 126, 157, 193, 176, 225, 50, 11, 145, 199, 95, 76, 179, 211, 211, 161, 31,
                    143, 8, 204, 92, 127, 109, 249, 32, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    227, 10, 244, 225, 111, 217, 147, 145, 212, 38, 155, 31, 211, 59, 235, 44, 99,
                    24, 38, 23, 107, 4, 211, 222, 17, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    127, 237, 16, 35, 125, 51, 72, 221, 207, 150, 56, 126, 180, 252, 61, 75, 87,
                    255, 193, 14, 249, 170, 130, 207, 32, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    181, 101, 188, 111, 160, 30, 186, 182, 205, 183, 108, 59, 181, 47, 26, 104, 45,
                    184, 173, 103, 107, 132, 2, 40, 35, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    109, 52, 112, 39, 105, 248, 205, 177, 234, 93, 239, 11, 44, 20, 194, 255, 46,
                    41, 219, 47, 107, 223, 245, 29, 122, 24, 0, 0, 0, 0, 0, 0,
                ],
                [
                    36, 38, 44, 246, 220, 133, 22, 122, 25, 42, 90, 129, 82, 182, 153, 228, 50, 62,
                    145, 73, 172, 19, 121, 251, 141, 229, 0, 0, 0, 0, 0, 0,
                ],
                [
                    81, 125, 237, 180, 2, 249, 180, 199, 34, 63, 200, 45, 17, 187, 57, 77, 184, 95,
                    66, 225, 84, 9, 92, 179, 76, 16, 0, 0, 0, 0, 0, 0,
                ],
                [
                    115, 18, 105, 179, 199, 247, 24, 189, 130, 162, 147, 112, 249, 172, 210, 155,
                    193, 16, 146, 53, 87, 250, 15, 168, 196, 126, 76, 5, 0, 0, 0, 0,
                ],
                [
                    98, 6, 83, 219, 181, 91, 31, 94, 30, 46, 43, 207, 129, 126, 155, 236, 89, 27,
                    41, 50, 3, 227, 183, 173, 42, 80, 0, 0, 0, 0, 0, 0,
                ],
                [
                    85, 146, 71, 236, 127, 55, 38, 140, 138, 245, 44, 68, 186, 195, 201, 248, 170,
                    67, 34, 150, 208, 13, 153, 77, 60, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    201, 151, 131, 49, 247, 248, 123, 242, 92, 135, 178, 84, 189, 68, 130, 184,
                    101, 66, 68, 60, 12, 201, 136, 176, 142, 87, 61, 15, 0, 0, 0, 0,
                ],
                [
                    67, 73, 127, 215, 248, 38, 149, 113, 8, 244, 163, 15, 217, 206, 195, 174, 186,
                    121, 151, 32, 132, 233, 14, 173, 1, 234, 51, 9, 0, 0, 0, 0,
                ],
            ],
            hash_stop: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ],
        };
        let mut bytes: Vec<u8> = vec![
            127, 17, 1, 0, 33, 4, 80, 41, 173, 94, 213, 14, 0, 74, 134, 99, 228, 190, 10, 253, 189,
            205, 171, 161, 199, 165, 95, 246, 123, 101, 3, 0, 0, 0, 0, 0, 0, 207, 230, 23, 89, 83,
            197, 224, 215, 246, 119, 85, 80, 147, 133, 87, 152, 194, 54, 218, 59, 63, 100, 246, 17,
            115, 58, 63, 106, 0, 0, 0, 0, 117, 205, 205, 12, 186, 229, 3, 79, 13, 203, 169, 159,
            140, 96, 32, 145, 91, 93, 18, 20, 64, 11, 136, 159, 3, 0, 0, 0, 0, 0, 0, 0, 30, 210,
            216, 123, 145, 148, 237, 35, 118, 217, 111, 122, 82, 156, 168, 95, 160, 151, 130, 78,
            253, 101, 183, 170, 25, 173, 43, 196, 0, 0, 0, 0, 255, 76, 148, 181, 0, 121, 35, 117,
            50, 138, 145, 84, 112, 18, 151, 188, 65, 200, 4, 193, 222, 164, 41, 208, 158, 97, 203,
            100, 0, 0, 0, 0, 142, 161, 36, 171, 101, 187, 145, 160, 9, 168, 222, 16, 85, 46, 50,
            76, 217, 219, 153, 127, 186, 102, 187, 4, 80, 229, 0, 0, 0, 0, 0, 0, 31, 216, 202, 73,
            179, 72, 94, 80, 97, 210, 236, 235, 131, 32, 107, 58, 198, 178, 43, 81, 242, 237, 68,
            53, 28, 0, 0, 0, 0, 0, 0, 0, 61, 123, 193, 129, 211, 101, 49, 87, 168, 252, 180, 63,
            227, 122, 251, 169, 64, 171, 242, 171, 30, 24, 111, 112, 0, 118, 0, 0, 0, 0, 0, 0, 196,
            190, 128, 199, 126, 208, 37, 8, 197, 78, 195, 79, 253, 185, 181, 238, 120, 13, 2, 200,
            121, 49, 147, 65, 115, 79, 162, 129, 0, 0, 0, 0, 174, 222, 225, 127, 148, 229, 221,
            201, 56, 14, 221, 62, 159, 50, 108, 159, 207, 244, 17, 232, 216, 237, 243, 118, 20, 17,
            0, 0, 0, 0, 0, 0, 17, 155, 106, 2, 239, 252, 193, 195, 137, 196, 103, 115, 204, 190,
            137, 158, 77, 99, 220, 125, 192, 28, 57, 179, 124, 131, 144, 101, 0, 0, 0, 0, 84, 117,
            15, 78, 47, 146, 15, 128, 128, 49, 80, 215, 158, 129, 70, 134, 146, 244, 53, 202, 4,
            130, 101, 107, 209, 6, 0, 0, 0, 0, 0, 0, 40, 119, 18, 62, 187, 225, 252, 127, 162, 236,
            233, 34, 77, 237, 185, 188, 60, 243, 106, 112, 158, 72, 149, 209, 84, 203, 106, 72, 0,
            0, 0, 0, 7, 241, 194, 169, 243, 0, 114, 169, 172, 214, 36, 250, 111, 22, 180, 14, 67,
            246, 73, 82, 89, 0, 78, 11, 2, 3, 0, 0, 0, 0, 0, 0, 120, 68, 45, 215, 223, 53, 46, 9,
            191, 208, 102, 191, 121, 127, 247, 236, 189, 7, 135, 90, 35, 48, 212, 54, 20, 180, 0,
            0, 0, 0, 0, 0, 233, 113, 147, 177, 249, 169, 12, 221, 14, 251, 222, 143, 195, 222, 141,
            1, 169, 70, 208, 127, 136, 134, 118, 139, 91, 177, 0, 0, 0, 0, 0, 0, 100, 248, 226, 6,
            190, 99, 103, 30, 33, 232, 234, 53, 189, 146, 102, 210, 99, 231, 128, 129, 253, 202,
            25, 211, 124, 33, 128, 112, 0, 0, 0, 0, 200, 215, 217, 48, 12, 240, 250, 231, 208, 43,
            84, 35, 52, 149, 212, 212, 233, 100, 133, 18, 87, 3, 96, 95, 180, 136, 189, 185, 0, 0,
            0, 0, 55, 72, 84, 1, 131, 235, 197, 113, 56, 42, 220, 113, 209, 129, 42, 115, 168, 12,
            219, 100, 47, 123, 157, 78, 255, 123, 118, 101, 0, 0, 0, 0, 136, 164, 23, 76, 81, 223,
            185, 89, 80, 142, 184, 128, 105, 130, 107, 150, 75, 27, 4, 26, 8, 150, 105, 171, 5, 0,
            0, 0, 0, 0, 0, 0, 144, 212, 241, 84, 243, 64, 129, 6, 198, 152, 60, 141, 249, 16, 90,
            197, 204, 84, 83, 134, 80, 32, 184, 142, 35, 0, 0, 0, 0, 0, 0, 0, 48, 126, 157, 193,
            176, 225, 50, 11, 145, 199, 95, 76, 179, 211, 211, 161, 31, 143, 8, 204, 92, 127, 109,
            249, 32, 0, 0, 0, 0, 0, 0, 0, 227, 10, 244, 225, 111, 217, 147, 145, 212, 38, 155, 31,
            211, 59, 235, 44, 99, 24, 38, 23, 107, 4, 211, 222, 17, 0, 0, 0, 0, 0, 0, 0, 127, 237,
            16, 35, 125, 51, 72, 221, 207, 150, 56, 126, 180, 252, 61, 75, 87, 255, 193, 14, 249,
            170, 130, 207, 32, 0, 0, 0, 0, 0, 0, 0, 181, 101, 188, 111, 160, 30, 186, 182, 205,
            183, 108, 59, 181, 47, 26, 104, 45, 184, 173, 103, 107, 132, 2, 40, 35, 0, 0, 0, 0, 0,
            0, 0, 109, 52, 112, 39, 105, 248, 205, 177, 234, 93, 239, 11, 44, 20, 194, 255, 46, 41,
            219, 47, 107, 223, 245, 29, 122, 24, 0, 0, 0, 0, 0, 0, 36, 38, 44, 246, 220, 133, 22,
            122, 25, 42, 90, 129, 82, 182, 153, 228, 50, 62, 145, 73, 172, 19, 121, 251, 141, 229,
            0, 0, 0, 0, 0, 0, 81, 125, 237, 180, 2, 249, 180, 199, 34, 63, 200, 45, 17, 187, 57,
            77, 184, 95, 66, 225, 84, 9, 92, 179, 76, 16, 0, 0, 0, 0, 0, 0, 115, 18, 105, 179, 199,
            247, 24, 189, 130, 162, 147, 112, 249, 172, 210, 155, 193, 16, 146, 53, 87, 250, 15,
            168, 196, 126, 76, 5, 0, 0, 0, 0, 98, 6, 83, 219, 181, 91, 31, 94, 30, 46, 43, 207,
            129, 126, 155, 236, 89, 27, 41, 50, 3, 227, 183, 173, 42, 80, 0, 0, 0, 0, 0, 0, 85,
            146, 71, 236, 127, 55, 38, 140, 138, 245, 44, 68, 186, 195, 201, 248, 170, 67, 34, 150,
            208, 13, 153, 77, 60, 0, 0, 0, 0, 0, 0, 0, 201, 151, 131, 49, 247, 248, 123, 242, 92,
            135, 178, 84, 189, 68, 130, 184, 101, 66, 68, 60, 12, 201, 136, 176, 142, 87, 61, 15,
            0, 0, 0, 0, 67, 73, 127, 215, 248, 38, 149, 113, 8, 244, 163, 15, 217, 206, 195, 174,
            186, 121, 151, 32, 132, 233, 14, 173, 1, 234, 51, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        assert_eq!(
            get_headers,
            GetHeadersMessage::deserialize(&mut bytes).unwrap()
        );
    }
}
